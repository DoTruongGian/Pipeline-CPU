module Controller (
    input logic [6:0] OP,
    input logic [6:0] funct77,
    input logic [2:0] funct3,
    input logic funct7,
    output logic MemWriteD,
    output logic ALUSrcD,
    output logic RegWriteD,
    output logic BranchD,
    output logic JumpD, //PCSrc
    output logic [1:0] ResultSrcD,
    output logic [4:0] ALUControlD,
    output logic [2:0] ImmSrcD
);
    
    wire logic [16:0] checker;
    assign checker = {{funct7, funct3}, funct77, OP}; // Concatenating the bits for checker
    
    always_comb begin // Combinational logic for setting control signals based on OP
        case(OP)
            7'b0000011: begin        // lw
                MemWriteD  = 0;
                ALUSrcD    = 1;
                RegWriteD  = 1;
                BranchD    = 0;
                JumpD      = 0;
                ResultSrcD = 2'b01;
                ALUControlD = 5'b00000;
                ImmSrcD    = 3'b000;
            end
            7'b0100011: begin  // sw
                MemWriteD  = 1;
                ALUSrcD    = 1;
                RegWriteD  = 0;
                BranchD    = 0;
                JumpD      = 0;
                ResultSrcD = 2'bxx;
                ALUControlD = 5'b00000;
                ImmSrcD    = 3'b001;
            end
            7'b0110011: begin  // R-type
                MemWriteD  = 0;
                ALUSrcD    = 0;
                RegWriteD  = 1;
                BranchD    = 0;
                JumpD      = 0;
                ResultSrcD = 2'b00;
                ALUControlD = funct7 ? 5'b01001 : 5'b00000;
                ImmSrcD    = 3'bxxx;
            end
            7'b1100011: begin  // branch
                MemWriteD  = 0;
                ALUSrcD    = 0;
                RegWriteD  = 0;
                BranchD    = 1;
                JumpD      = 0;
                ResultSrcD = 2'bxx;
                ALUControlD = 5'b00001;
                ImmSrcD    = 3'b010;
            end
            7'b0010011: begin  // I-Type
                MemWriteD  = 0;
                ALUSrcD    = 1;
                RegWriteD  = 1;
                BranchD    = 0;
                JumpD      = 0;
                ResultSrcD = 2'b00;
                ALUControlD = 5'b00000;
                ImmSrcD    = 3'b000;
            end
            7'b1101111: begin // j
                MemWriteD  = 0;
                ALUSrcD    = 1'bx;
                RegWriteD  = 1;
                BranchD    = 0;
                JumpD      = 1;
                ResultSrcD = 2'b10;
                ALUControlD = 5'b10000;
                ImmSrcD    = 3'b011;
            end
            default: begin // Default case
                MemWriteD  = 0;
                ALUSrcD    = 1'bx;
                RegWriteD  = 0;
                BranchD    = 0;
                JumpD      = 0;
                ResultSrcD = 2'b00;
                ALUControlD = 5'b00000;
                ImmSrcD    = 3'b000;
            end
        endcase
    end

endmodule
