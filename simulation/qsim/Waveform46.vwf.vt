// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2024 14:05:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          main
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module main_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst;
// wires                                               
wire [31:0] DM0;
wire [31:0] checkx1;
wire [31:0] checkx2;
wire [31:0] checkx3;
wire [31:0] checkx4;
wire [31:0] checkx5;
wire [31:0] checkx6;
wire flag_2comm;
wire [31:0] instruction;
wire [2:0] test;

// assign statements (if any)                          
main i1 (
// port map - connection between master ports and signals/registers   
	.DM0(DM0),
	.checkx1(checkx1),
	.checkx2(checkx2),
	.checkx3(checkx3),
	.checkx4(checkx4),
	.checkx5(checkx5),
	.checkx6(checkx6),
	.clk(clk),
	.flag_2comm(flag_2comm),
	.instruction(instruction),
	.rst(rst),
	.test(test)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
end 
endmodule

